/**
 * Compiler SPL to SSM (Simple stack machine)
 * Author: Danny Hendrix
 * Original authors (Haskell): Danny Hendrix, Harm Berntsen
 */
part of splgrammar;

class SPLGrammar extends LLARTable
{
  SPLGrammar()
  {
    /**
     * Auto generated code
     */
//TODO:end
//appendRule(0 (End, Accept);
appendRule(0, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(0 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(0 ,"Void", LLARTable.ACTION_SHIFT, 3);
appendRule(0 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(0 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(0 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(0, "<decl>", LLARTable.ACTION_GOTO, 7);
appendRule(0, "<declvar>", LLARTable.ACTION_GOTO, 8);
appendRule(0, "<declfun>", LLARTable.ACTION_GOTO, 9);
appendRule(0, "<declvar>", LLARTable.ACTION_ACCEPT, 0);
appendRule(0, "<declfun>", LLARTable.ACTION_ACCEPT, 0);
appendRule(0, "<type>", LLARTable.ACTION_GOTO, 10);
appendRule(1, "<all>",LLARTable.ACTION_REDUCE, 12);
appendRule(2, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(2 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(2 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(2 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(2 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(2, "<type>", LLARTable.ACTION_GOTO, 11);
appendRule(3, "<id>", LLARTable.ACTION_SHIFT, 12);
appendRule(4, "<all>",LLARTable.ACTION_REDUCE, 8);
appendRule(5, "<all>",LLARTable.ACTION_REDUCE, 9);
appendRule(6, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(6 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(6 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(6 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(6 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(6, "<type>", LLARTable.ACTION_GOTO, 13);
//appendRule(7, "<all>",LLARTable.ACTION_ACCEPT, 0);
appendRule(8, "<all>",LLARTable.ACTION_REDUCE, 1);
appendRule(9, "<all>",LLARTable.ACTION_REDUCE, 2);
appendRule(10 ,"->", LLARTable.ACTION_SHIFT, 15);
appendRule(10, "<id>", LLARTable.ACTION_SHIFT, 16);
appendRule(11 ,"->", LLARTable.ACTION_SHIFT, 17);
appendRule(11 ,",", LLARTable.ACTION_SHIFT, 18);
appendRule(12 ,"(", LLARTable.ACTION_SHIFT, 19);
appendRule(13 ,"->", LLARTable.ACTION_SHIFT, 15);
appendRule(13 ,"]", LLARTable.ACTION_SHIFT, 20);
appendRule(14, "<all>",LLARTable.ACTION_ACCEPT, 0);
appendRule(15, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(15 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(15 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(15 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(15 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(15, "<type>", LLARTable.ACTION_GOTO, 21);
appendRule(16 ,"=", LLARTable.ACTION_SHIFT, 22);
appendRule(16 ,"(", LLARTable.ACTION_SHIFT, 23);
appendRule(17, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(17 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(17 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(17 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(17 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(17, "<type>", LLARTable.ACTION_GOTO, 24);
appendRule(18, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(18 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(18 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(18 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(18 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(18, "<type>", LLARTable.ACTION_GOTO, 25);
appendRule(19, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(19 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(19 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(19 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(19 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(19, "<type>", LLARTable.ACTION_GOTO, 26);
appendRule(19, "<fargs>", LLARTable.ACTION_GOTO, 27);
appendRule(19, "<fargsopt>", LLARTable.ACTION_GOTO, 28);
appendRule(19, "<all>",LLARTable.ACTION_REDUCE, 17);
appendRule(20, "<all>",LLARTable.ACTION_REDUCE, 11);
appendRule(21, "<all>",LLARTable.ACTION_REDUCE, 13);
appendRule(22 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(22 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(22, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(22 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(22 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(22, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(22 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(22 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(22, "<exp>", LLARTable.ACTION_GOTO, 37);
appendRule(22, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(23, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(23 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(23 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(23 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(23 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(23, "<type>", LLARTable.ACTION_GOTO, 26);
appendRule(23, "<fargs>", LLARTable.ACTION_GOTO, 27);
appendRule(23, "<fargsopt>", LLARTable.ACTION_GOTO, 39);
appendRule(23, "<all>",LLARTable.ACTION_REDUCE, 17);
appendRule(24 ,")", LLARTable.ACTION_SHIFT, 40);
appendRule(24, "<all>",LLARTable.ACTION_REDUCE, 13);
appendRule(25 ,"->", LLARTable.ACTION_SHIFT, 15);
appendRule(25 ,")", LLARTable.ACTION_SHIFT, 41);
appendRule(26 ,"->", LLARTable.ACTION_SHIFT, 15);
appendRule(26, "<id>", LLARTable.ACTION_SHIFT, 42);
appendRule(27 ,",", LLARTable.ACTION_SHIFT, 43);
appendRule(27, "<all>",LLARTable.ACTION_REDUCE, 18);
appendRule(28 ,")", LLARTable.ACTION_SHIFT, 44);
appendRule(29 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(29 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(29, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(29 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(29 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(29, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(29 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(29 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(29, "<exp>", LLARTable.ACTION_GOTO, 45);
appendRule(29, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(30 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(30 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(30, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(30 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(30 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(30, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(30 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(30 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(30, "<exp>", LLARTable.ACTION_GOTO, 46);
appendRule(30, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(31 ,"(", LLARTable.ACTION_SHIFT, 47);
appendRule(31 ,".", LLARTable.ACTION_SHIFT, 48);
appendRule(31, "<field>", LLARTable.ACTION_GOTO, 49);
appendRule(31, "<all>",LLARTable.ACTION_REDUCE, 53);
appendRule(32 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(32 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(32, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(32 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(32 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(32, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(32 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(32 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(32, "<exp>", LLARTable.ACTION_GOTO, 50);
appendRule(32, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(33 ,"]", LLARTable.ACTION_SHIFT, 51);
appendRule(34, "<all>",LLARTable.ACTION_REDUCE, 46);
appendRule(35, "<all>",LLARTable.ACTION_REDUCE, 47);
appendRule(36, "<all>",LLARTable.ACTION_REDUCE, 48);
appendRule(37 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(37 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(37 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(37 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(37 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(37 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(37 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(37 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(37 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(37 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(37 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(37 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(37 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(37 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(37 ,";", LLARTable.ACTION_SHIFT, 66);
appendRule(38, "<all>",LLARTable.ACTION_REDUCE, 50);
appendRule(39 ,")", LLARTable.ACTION_SHIFT, 67);
appendRule(40, "<all>",LLARTable.ACTION_REDUCE, 14);
appendRule(41, "<all>",LLARTable.ACTION_REDUCE, 10);
appendRule(42, "<all>",LLARTable.ACTION_REDUCE, 16);
appendRule(43, "<id>", LLARTable.ACTION_SHIFT, 1);
appendRule(43 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(43 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(43 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(43 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(43, "<type>", LLARTable.ACTION_GOTO, 68);
appendRule(44 ,"{", LLARTable.ACTION_SHIFT, 69);
appendRule(45 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(45 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(45 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(45 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(45 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(45 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(45 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(45 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(45 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(45 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(45 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(45 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(45 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(45 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(45, "<all>",LLARTable.ACTION_REDUCE, 44);
appendRule(46 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(46 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(46 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(46, "<all>",LLARTable.ACTION_REDUCE, 45);
appendRule(47 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(47 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(47 ,")", LLARTable.ACTION_SHIFT, 70);
appendRule(47, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(47 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(47 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(47, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(47 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(47 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(47, "<exp>", LLARTable.ACTION_GOTO, 71);
appendRule(47, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(47, "<actargs>", LLARTable.ACTION_GOTO, 72);
appendRule(48 ,"hd", LLARTable.ACTION_SHIFT, 73);
appendRule(48 ,"tl", LLARTable.ACTION_SHIFT, 74);
appendRule(48 ,"fst", LLARTable.ACTION_SHIFT, 75);
appendRule(48 ,"snd", LLARTable.ACTION_SHIFT, 76);
appendRule(49, "<all>",LLARTable.ACTION_REDUCE, 29);
appendRule(50 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(50 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(50 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(50 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(50 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(50 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(50 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(50 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(50 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(50 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(50 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(50 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(50 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(50 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(50 ,")", LLARTable.ACTION_SHIFT, 77);
appendRule(50 ,",", LLARTable.ACTION_SHIFT, 78);
appendRule(51, "<all>",LLARTable.ACTION_REDUCE, 51);
appendRule(52 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(52 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(52, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(52 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(52 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(52, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(52 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(52 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(52, "<exp>", LLARTable.ACTION_GOTO, 79);
appendRule(52, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(53 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(53 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(53, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(53 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(53 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(53, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(53 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(53 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(53, "<exp>", LLARTable.ACTION_GOTO, 80);
appendRule(53, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(54 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(54 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(54, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(54 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(54 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(54, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(54 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(54 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(54, "<exp>", LLARTable.ACTION_GOTO, 81);
appendRule(54, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(55 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(55 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(55, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(55 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(55 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(55, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(55 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(55 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(55, "<exp>", LLARTable.ACTION_GOTO, 82);
appendRule(55, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(56 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(56 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(56, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(56 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(56 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(56, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(56 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(56 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(56, "<exp>", LLARTable.ACTION_GOTO, 83);
appendRule(56, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(57 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(57 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(57, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(57 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(57 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(57, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(57 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(57 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(57, "<exp>", LLARTable.ACTION_GOTO, 84);
appendRule(57, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(58 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(58 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(58, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(58 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(58 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(58, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(58 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(58 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(58, "<exp>", LLARTable.ACTION_GOTO, 85);
appendRule(58, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(59 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(59 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(59, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(59 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(59 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(59, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(59 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(59 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(59, "<exp>", LLARTable.ACTION_GOTO, 86);
appendRule(59, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(60 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(60 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(60, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(60 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(60 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(60, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(60 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(60 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(60, "<exp>", LLARTable.ACTION_GOTO, 87);
appendRule(60, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(61 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(61 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(61, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(61 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(61 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(61, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(61 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(61 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(61, "<exp>", LLARTable.ACTION_GOTO, 88);
appendRule(61, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(62 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(62 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(62, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(62 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(62 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(62, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(62 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(62 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(62, "<exp>", LLARTable.ACTION_GOTO, 89);
appendRule(62, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(63 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(63 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(63, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(63 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(63 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(63, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(63 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(63 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(63, "<exp>", LLARTable.ACTION_GOTO, 90);
appendRule(63, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(64 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(64 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(64, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(64 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(64 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(64, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(64 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(64 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(64, "<exp>", LLARTable.ACTION_GOTO, 91);
appendRule(64, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(65 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(65 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(65, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(65 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(65 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(65, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(65 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(65 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(65, "<exp>", LLARTable.ACTION_GOTO, 92);
appendRule(65, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(66, "<all>",LLARTable.ACTION_REDUCE, 3);
appendRule(67 ,"{", LLARTable.ACTION_SHIFT, 93);
appendRule(68 ,"->", LLARTable.ACTION_SHIFT, 15);
appendRule(68, "<id>", LLARTable.ACTION_SHIFT, 94);
appendRule(69, "<id>", LLARTable.ACTION_SHIFT, 95);
appendRule(69 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(69 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(69 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(69 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(69 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(69 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(69 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(69 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(69, "<declvar>", LLARTable.ACTION_GOTO, 100);
appendRule(69, "<functionbegin>", LLARTable.ACTION_GOTO, 101);
appendRule(69, "<type>", LLARTable.ACTION_GOTO, 102);
appendRule(69, "<stmt>", LLARTable.ACTION_GOTO, 103);
appendRule(69, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(70, "<all>",LLARTable.ACTION_REDUCE, 58);
appendRule(71 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(71 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(71 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(71 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(71 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(71 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(71 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(71 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(71 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(71 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(71 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(71 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(71 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(71 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(71 ,",", LLARTable.ACTION_SHIFT, 105);
appendRule(71, "<all>",LLARTable.ACTION_REDUCE, 60);
appendRule(72 ,")", LLARTable.ACTION_SHIFT, 106);
appendRule(73 ,".", LLARTable.ACTION_SHIFT, 48);
appendRule(73, "<field>", LLARTable.ACTION_GOTO, 107);
appendRule(73, "<all>",LLARTable.ACTION_REDUCE, 53);
appendRule(74 ,".", LLARTable.ACTION_SHIFT, 48);
appendRule(74, "<field>", LLARTable.ACTION_GOTO, 108);
appendRule(74, "<all>",LLARTable.ACTION_REDUCE, 53);
appendRule(75 ,".", LLARTable.ACTION_SHIFT, 48);
appendRule(75, "<field>", LLARTable.ACTION_GOTO, 109);
appendRule(75, "<all>",LLARTable.ACTION_REDUCE, 53);
appendRule(76 ,".", LLARTable.ACTION_SHIFT, 48);
appendRule(76, "<field>", LLARTable.ACTION_GOTO, 110);
appendRule(76, "<all>",LLARTable.ACTION_REDUCE, 53);
appendRule(77, "<all>",LLARTable.ACTION_REDUCE, 49);
appendRule(78 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(78 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(78, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(78 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(78 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(78, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(78 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(78 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(78, "<exp>", LLARTable.ACTION_GOTO, 111);
appendRule(78, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(79 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(79 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(79 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(79 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(79 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(79 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(79 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(79 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(79 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(79 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(79 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(79 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(79 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(79 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(79, "<all>",LLARTable.ACTION_REDUCE, 43);
appendRule(80 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(80 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(80 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(80 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(80 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(80 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(80 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(80 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(80 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(80 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(80 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(80 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(80, "<all>",LLARTable.ACTION_REDUCE, 42);
appendRule(81 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(81 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(81 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(81 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(81 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(81 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(81 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(81 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(81 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(81 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(81 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(81, "<all>",LLARTable.ACTION_REDUCE, 41);
appendRule(82 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(82 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(82 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(82 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(82 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(82 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(82 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(82 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(82 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(82, "<all>",LLARTable.ACTION_REDUCE, 35);
appendRule(83 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(83 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(83 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(83 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(83 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(83 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(83 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(83 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(83 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(83, "<all>",LLARTable.ACTION_REDUCE, 40);
appendRule(84 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(84 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(84 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(84 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(84 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(84, "<all>",LLARTable.ACTION_REDUCE, 36);
appendRule(85 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(85 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(85 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(85 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(85 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(85, "<all>",LLARTable.ACTION_REDUCE, 37);
appendRule(86 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(86 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(86 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(86 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(86 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(86, "<all>",LLARTable.ACTION_REDUCE, 38);
appendRule(87 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(87 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(87 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(87 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(87 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(87, "<all>",LLARTable.ACTION_REDUCE, 39);
appendRule(88 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(88 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(88 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(88, "<all>",LLARTable.ACTION_REDUCE, 30);
appendRule(89 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(89 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(89 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(89, "<all>",LLARTable.ACTION_REDUCE, 31);
appendRule(90, "<all>",LLARTable.ACTION_REDUCE, 32);
appendRule(91, "<all>",LLARTable.ACTION_REDUCE, 33);
appendRule(92, "<all>",LLARTable.ACTION_REDUCE, 34);
appendRule(93, "<id>", LLARTable.ACTION_SHIFT, 95);
appendRule(93 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(93 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(93 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(93 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(93 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(93 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(93 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(93 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(93, "<declvar>", LLARTable.ACTION_GOTO, 100);
appendRule(93, "<functionbegin>", LLARTable.ACTION_GOTO, 112);
appendRule(93, "<type>", LLARTable.ACTION_GOTO, 102);
appendRule(93, "<stmt>", LLARTable.ACTION_GOTO, 103);
appendRule(93, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(94, "<all>",LLARTable.ACTION_REDUCE, 15);
appendRule(95 ,"(", LLARTable.ACTION_SHIFT, 47);
appendRule(95 ,".", LLARTable.ACTION_SHIFT, 48);
appendRule(95, "<field>", LLARTable.ACTION_GOTO, 113);
appendRule(95 ,"=", LLARTable.ACTION_REDUCE, 53);
appendRule(95, "<all>",LLARTable.ACTION_REDUCE, 12);
appendRule(96, "<id>", LLARTable.ACTION_SHIFT, 114);
appendRule(96 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(96 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(96 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(96 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(96, "<stmt>", LLARTable.ACTION_GOTO, 115);
appendRule(96, "<stmtstar>", LLARTable.ACTION_GOTO, 116);
appendRule(96, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(96, "<all>",LLARTable.ACTION_REDUCE, 27);
appendRule(97 ,"(", LLARTable.ACTION_SHIFT, 117);
appendRule(98 ,"(", LLARTable.ACTION_SHIFT, 118);
appendRule(99 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(99 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(99, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(99 ,";", LLARTable.ACTION_SHIFT, 119);
appendRule(99 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(99 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(99, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(99 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(99 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(99, "<exp>", LLARTable.ACTION_GOTO, 120);
appendRule(99, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(100, "<id>", LLARTable.ACTION_SHIFT, 95);
appendRule(100 ,"(", LLARTable.ACTION_SHIFT, 2);
appendRule(100 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(100 ,"Int", LLARTable.ACTION_SHIFT, 4);
appendRule(100 ,"Bool", LLARTable.ACTION_SHIFT, 5);
appendRule(100 ,"[", LLARTable.ACTION_SHIFT, 6);
appendRule(100 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(100 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(100 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(100, "<declvar>", LLARTable.ACTION_GOTO, 100);
appendRule(100, "<functionbegin>", LLARTable.ACTION_GOTO, 121);
appendRule(100, "<type>", LLARTable.ACTION_GOTO, 102);
appendRule(100, "<stmt>", LLARTable.ACTION_GOTO, 103);
appendRule(100, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(101, "<id>", LLARTable.ACTION_SHIFT, 114);
appendRule(101 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(101 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(101 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(101 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(101, "<stmt>", LLARTable.ACTION_GOTO, 115);
appendRule(101, "<stmtstar>", LLARTable.ACTION_GOTO, 122);
appendRule(101, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(101, "<all>",LLARTable.ACTION_REDUCE, 27);
appendRule(102 ,"->", LLARTable.ACTION_SHIFT, 15);
appendRule(102, "<id>", LLARTable.ACTION_SHIFT, 123);
appendRule(103, "<all>",LLARTable.ACTION_REDUCE, 5);
appendRule(104 ,";", LLARTable.ACTION_SHIFT, 124);
appendRule(105 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(105 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(105, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(105 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(105 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(105, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(105 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(105 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(105, "<exp>", LLARTable.ACTION_GOTO, 71);
appendRule(105, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(105, "<actargs>", LLARTable.ACTION_GOTO, 125);
appendRule(106, "<all>",LLARTable.ACTION_REDUCE, 59);
appendRule(107, "<all>",LLARTable.ACTION_REDUCE, 54);
appendRule(108, "<all>",LLARTable.ACTION_REDUCE, 55);
appendRule(109, "<all>",LLARTable.ACTION_REDUCE, 56);
appendRule(110, "<all>",LLARTable.ACTION_REDUCE, 57);
appendRule(111 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(111 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(111 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(111 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(111 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(111 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(111 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(111 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(111 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(111 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(111 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(111 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(111 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(111 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(111 ,")", LLARTable.ACTION_SHIFT, 126);
appendRule(112, "<id>", LLARTable.ACTION_SHIFT, 114);
appendRule(112 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(112 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(112 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(112 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(112, "<stmt>", LLARTable.ACTION_GOTO, 115);
appendRule(112, "<stmtstar>", LLARTable.ACTION_GOTO, 127);
appendRule(112, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(112, "<all>",LLARTable.ACTION_REDUCE, 27);
appendRule(113 ,"=", LLARTable.ACTION_SHIFT, 128);
appendRule(114 ,"(", LLARTable.ACTION_SHIFT, 47);
appendRule(114 ,".", LLARTable.ACTION_SHIFT, 48);
appendRule(114, "<field>", LLARTable.ACTION_GOTO, 113);
appendRule(114, "<all>",LLARTable.ACTION_REDUCE, 53);
appendRule(115, "<id>", LLARTable.ACTION_SHIFT, 114);
appendRule(115 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(115 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(115 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(115 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(115, "<stmt>", LLARTable.ACTION_GOTO, 115);
appendRule(115, "<stmtstar>", LLARTable.ACTION_GOTO, 129);
appendRule(115, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(115, "<all>",LLARTable.ACTION_REDUCE, 27);
appendRule(116 ,"}", LLARTable.ACTION_SHIFT, 130);
appendRule(117 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(117 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(117, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(117 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(117 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(117, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(117 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(117 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(117, "<exp>", LLARTable.ACTION_GOTO, 131);
appendRule(117, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(118 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(118 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(118, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(118 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(118 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(118, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(118 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(118 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(118, "<exp>", LLARTable.ACTION_GOTO, 132);
appendRule(118, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(119, "<all>",LLARTable.ACTION_REDUCE, 25);
appendRule(120 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(120 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(120 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(120 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(120 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(120 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(120 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(120 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(120 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(120 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(120 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(120 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(120 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(120 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(120 ,";", LLARTable.ACTION_SHIFT, 133);
appendRule(121, "<all>",LLARTable.ACTION_REDUCE, 4);
appendRule(122 ,"}", LLARTable.ACTION_SHIFT, 134);
appendRule(123 ,"=", LLARTable.ACTION_SHIFT, 22);
appendRule(124, "<all>",LLARTable.ACTION_REDUCE, 24);
appendRule(125, "<all>",LLARTable.ACTION_REDUCE, 61);
appendRule(126, "<all>",LLARTable.ACTION_REDUCE, 52);
appendRule(127 ,"}", LLARTable.ACTION_SHIFT, 135);
appendRule(128 ,"!", LLARTable.ACTION_SHIFT, 29);
appendRule(128 ,"-", LLARTable.ACTION_SHIFT, 30);
appendRule(128, "<id>", LLARTable.ACTION_SHIFT, 31);
appendRule(128 ,"(", LLARTable.ACTION_SHIFT, 32);
appendRule(128 ,"[", LLARTable.ACTION_SHIFT, 33);
appendRule(128, "<int>", LLARTable.ACTION_SHIFT, 34);
appendRule(128 ,"False", LLARTable.ACTION_SHIFT, 35);
appendRule(128 ,"True", LLARTable.ACTION_SHIFT, 36);
appendRule(128, "<exp>", LLARTable.ACTION_GOTO, 136);
appendRule(128, "<funcall>", LLARTable.ACTION_GOTO, 38);
appendRule(129, "<all>",LLARTable.ACTION_REDUCE, 28);
appendRule(130, "<all>",LLARTable.ACTION_REDUCE, 19);
appendRule(131 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(131 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(131 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(131 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(131 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(131 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(131 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(131 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(131 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(131 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(131 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(131 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(131 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(131 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(131 ,")", LLARTable.ACTION_SHIFT, 137);
appendRule(132 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(132 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(132 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(132 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(132 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(132 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(132 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(132 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(132 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(132 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(132 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(132 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(132 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(132 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(132 ,")", LLARTable.ACTION_SHIFT, 138);
appendRule(133, "<all>",LLARTable.ACTION_REDUCE, 26);
appendRule(134, "<all>",LLARTable.ACTION_REDUCE, 7);
appendRule(135, "<all>",LLARTable.ACTION_REDUCE, 6);
appendRule(136 ,":", LLARTable.ACTION_SHIFT, 52);
appendRule(136 ,"||", LLARTable.ACTION_SHIFT, 53);
appendRule(136 ,"&&", LLARTable.ACTION_SHIFT, 54);
appendRule(136 ,"==", LLARTable.ACTION_SHIFT, 55);
appendRule(136 ,"!=", LLARTable.ACTION_SHIFT, 56);
appendRule(136 ,"<", LLARTable.ACTION_SHIFT, 57);
appendRule(136 ,">", LLARTable.ACTION_SHIFT, 58);
appendRule(136 ,"<=", LLARTable.ACTION_SHIFT, 59);
appendRule(136 ,">=", LLARTable.ACTION_SHIFT, 60);
appendRule(136 ,"+", LLARTable.ACTION_SHIFT, 61);
appendRule(136 ,"-", LLARTable.ACTION_SHIFT, 62);
appendRule(136 ,"*", LLARTable.ACTION_SHIFT, 63);
appendRule(136 ,"/", LLARTable.ACTION_SHIFT, 64);
appendRule(136 ,"%", LLARTable.ACTION_SHIFT, 65);
appendRule(136 ,";", LLARTable.ACTION_SHIFT, 139);
appendRule(137, "<id>", LLARTable.ACTION_SHIFT, 114);
appendRule(137 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(137 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(137 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(137 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(137, "<stmt>", LLARTable.ACTION_GOTO, 140);
appendRule(137, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(138, "<id>", LLARTable.ACTION_SHIFT, 114);
appendRule(138 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(138 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(138 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(138 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(138, "<stmt>", LLARTable.ACTION_GOTO, 141);
appendRule(138, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(139, "<all>",LLARTable.ACTION_REDUCE, 23);
appendRule(140 ,"else", LLARTable.ACTION_SHIFT, 142);
appendRule(140, "<all>",LLARTable.ACTION_REDUCE, 20);
appendRule(141, "<all>",LLARTable.ACTION_REDUCE, 22);
appendRule(142, "<id>", LLARTable.ACTION_SHIFT, 114);
appendRule(142 ,"{", LLARTable.ACTION_SHIFT, 96);
appendRule(142 ,"if", LLARTable.ACTION_SHIFT, 97);
appendRule(142 ,"while", LLARTable.ACTION_SHIFT, 98);
appendRule(142 ,"return", LLARTable.ACTION_SHIFT, 99);
appendRule(142, "<stmt>", LLARTable.ACTION_GOTO, 143);
appendRule(142, "<funcall>", LLARTable.ACTION_GOTO, 104);
appendRule(143, "<all>",LLARTable.ACTION_REDUCE, 21);
  }

  SPLBase reduceToken(int rule)
    {
      switch(rule)
       {
        //case 1:
        //  return new Decl.variable(stack);
        //case 2:
        //  return new Decl.function(stack);
        case 3:
          return new DeclVar(stack);
        case 4:
          return new FunctionBeginVarDecl(stack);
        case 5:
          return new FunctionBeginStmt(stack);
        case 6:
          return new DeclFun(stack);
        case 7:
          return new DeclFun.noreturn(stack);
        case 8:
          return new TypeInt(stack);
        case 9:
          return new TypeBool(stack);
        case 10:
          return new TypeTuple(stack);
        case 11:
          return new TypeList(stack);
        case 12:
          return new TypeId(stack);
        case 13:
          return new TypeFunction(stack);
          case 14:
          return new TypeFunction(stack, true);

          case 15:
          return new FArgs(stack);
          case 16:
          return new FArgs.single(stack);

          case 17:
          return new FArgsOpt.empty(stack);
          case 18:
          return new FArgsOpt(stack);

          case 19:
          return new StmtWrapped(stack);
          case 20:
          return new StmtIf(stack);
          case 21:
          return new StmtIf.ifelse(stack);
          case 22:
          return new StmtWhile(stack);
          case 23:
          return new StmtDecl(stack);
          case 24:
          return new StmtFunCall(stack);
          case 25:
          return new StmtReturn.noexp(stack);
          case 26:
          return new StmtReturn(stack);

          case 27:
          return new StmtStar.empty(stack);
          case 28:
          return new StmtStar(stack);

          case 29:
          return new ExpId(stack);
          case 46:
          return new ExpInt(stack);
          case 47:
          return new ExpFalse(stack);
          case 48:
          return new ExpTrue(stack);
          case 49:
          return new ExpWrapped(stack);
          case 50:
          return new ExpFuncall(stack);
          case 51:
          return new ExpEmptyList(stack);
          case 52:
          return new ExpTuple(stack);

          case 53:
             return new Field.empty(stack);

          case 58:
          return new FunCall(stack);
          case 59:
          return new FunCall.args(stack);

          case 60:
          return new ActArgs(stack);
          case 61:
          return new ActArgs.args(stack);
       }
        if(rule >= 30 && rule <= 43)
          return new ExpOp2(stack);
        if(rule <= 45)
          return new ExpOp1(stack);
        if(rule<=57)
             return new Field(stack);
      return null;
    }
}